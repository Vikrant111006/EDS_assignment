# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_9ZeU84uL4B3qvKagcBgVunSlfxVB4XP
"""

1.Total number of matches played

import pandas as pd
file_path = 'ipl_dataset.xlsx'

# Load specific sheets into DataFrames
sheet1_df = excel_file.parse('Sheet1')
sheet2_df = excel_file.parse('Sheet2')

total_matches = sheet1_df.shape[0]
print("1. Total number of matches played:", total_matches)

"""2.  Unique seasons in the dataset"""

unique_seasons = sheet1_df['season'].nunique()
print("2. Number of unique seasons:", unique_seasons)

"""3. Total number of unique teams"""

unique_teams = pd.unique(sheet1_df[['team1', 'team2']].values.ravel('K'))
print("3. Total unique teams:", len(unique_teams))
print("   Teams:", unique_teams)

""" 4. Team with the most wins"""

top_team = sheet1_df['winner'].value_counts().idxmax()
print("4. Team with most wins:", top_team)

"""5. Player with the most Player of the Match awards"""

top_player = sheet1_df['player_of_match'].value_counts().idxmax()
print("5. Player with most Player of the Match awards:", top_player)

"""6. Matches where toss winner also won the match"""

toss_and_match_winner = (sheet1_df['toss_winner'] == sheet1_df['winner']).sum()
print("6. Matches where toss winner also won:", toss_and_match_winner)

"""7. Average win margin by runs"""

avg_win_by_runs = sheet1_df['win_by_runs'].mean()
print("7. Average win margin (runs):", round(avg_win_by_runs, 2))

"""8. Match with highest win by runs:"""

highest_run_victory = sheet1_df.loc[sheet1_df['win_by_runs'].idxmax()]
print("8. Match with highest win by runs:\n", highest_run_victory)

"""9. Match with the highest win by wickets"""

highest_wicket_victory = sheet1_df.loc[sheet1_df['win_by_wickets'].idxmax()]
print("9. Match with highest win by wickets:\n", highest_wicket_victory)

"""10. Number of matches decided by D/L method"""

dl_matches = sheet1_df['dl_applied'].fillna(0).astype(int).sum()
print("10. Matches decided by D/L method:", dl_matches)

"""11. Toss decision counts"""

toss_decision_counts = sheet1_df['toss_decision'].value_counts()
print("11. Toss decision counts:\n", toss_decision_counts)

"""12. Number of cities where matches were held"""

num_cities = sheet1_df['city'].nunique()
print("12. Number of cities where matches were held:", num_cities)

"""13. Top 5 most frequently used venues"""

top_venues = sheet2_df['venue'].value_counts().head(5)
print("13. Top 5 venues:\n", top_venues)

"""14. Umpire who officiated the most (umpire1)"""

top_umpire = sheet1_df['umpire1'].value_counts().idxmax()
print("14. Umpire with most appearances (umpire1):", top_umpire)

"""15. Matches with missing umpire2"""

missing_umpire2 = sheet2_df['umpire2'].isnull().sum()
print("15. Matches with missing umpire2:", missing_umpire2)

"""16. Most frequent team matchup"""

matchups = sheet1_df.groupby(['team1', 'team2']).size().sort_values(ascending=False).head(1)
print("16. Most frequent matchup:\n", matchups)

""" 17. Number of tied matches"""

ties = sheet2_df['result'].str.contains('tie', case=False, na=False).sum()
print("17. Number of tied matches:", ties)

"""18. Season with highest number of matches"""

matches_per_season = sheet1_df['season'].value_counts().idxmax()
print("18. Season with most matches:", matches_per_season)

"""19. City with most hosted matches"""

top_city = sheet1_df['city'].value_counts().idxmax()
print("19. City with most matches:", top_city)

"""20. Percentage of toss winners who chose to field"""

field_decision_pct = (sheet1_df['toss_decision'] == 'field').mean() * 100
print("20. Percentage of toss winners who chose to field: {:.2f}%".format(field_decision_pct))